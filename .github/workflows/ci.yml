name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install backend dependencies
      run: cd server && npm ci
    
    - name: Run backend tests
      run: cd server && npm test
      env:
        NODE_ENV: test
        MONGODB_URI_TEST: mongodb://localhost:27017/recipe-share-test
        JWT_SECRET: test-secret-key
    
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
    
    - name: Install frontend dependencies
      run: cd client && npm ci
    
    - name: Run frontend tests
      run: cd client && npm test -- --watchAll=false --coverage --passWithNoTests
      env:
        CI: true
    
    - name: Upload frontend test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  build:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd server && npm ci
        cd ../client && npm ci
    
    - name: Build frontend
      run: cd client && npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: |
          server/
          client/build/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: ./
    
    - name: Deploy to Leapcell
      env:
        LEAPCELL_TOKEN: ${{ secrets.LEAPCELL_TOKEN }}
        LEAPCELL_PROJECT_ID: ${{ secrets.LEAPCELL_PROJECT_ID }}
      run: |
        # Deploy to Leapcell using their API
        echo "Deploying to Leapcell..."
        # curl -X POST "https://api.leapcell.com/v1/projects/$LEAPCELL_PROJECT_ID/deploy" \
        #   -H "Authorization: Bearer $LEAPCELL_TOKEN" \
        #   -H "Content-Type: application/json" \
        #   -d '{"branch": "main"}' 